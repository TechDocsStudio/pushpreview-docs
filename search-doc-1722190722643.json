[{"title":"Authentication","type":0,"sectionRef":"#","url":"/configuration/authentication","content":"","keywords":""},{"title":"Generate the PushPreview API Key​","type":1,"pageTitle":"Authentication","url":"/configuration/authentication#generate-the-pushpreview-api-key","content":"To obtain an API key, follow these steps: Log into your PushPreview account. Navigate to the Teams tab. Under the API Keys section, click on Create API Key. The generated API key will be displayed for you to copy. Remember to save this key securely, as it will only be displayed once and cannot be retrieved later. "},{"title":"Integration with projects​","type":1,"pageTitle":"Authentication","url":"/configuration/authentication#integration-with-projects","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"Private previews","type":0,"sectionRef":"#","url":"/configuration/private-previews","content":"","keywords":""},{"title":"Enable private previews by default​","type":1,"pageTitle":"Private previews","url":"/configuration/private-previews#enable-private-previews-by-default","content":"To make all previews private by default for all your integrations, follow these steps: Log in to your PushPreview account. Navigate to the Team page. Turn on the Private previews option. Save the changes. This setting ensures that every new preview generated will be private, accessible only to users with the appropriate permissions. "},{"title":"Mark individual integrations as private​","type":1,"pageTitle":"Private previews","url":"/configuration/private-previews#mark-individual-integrations-as-private","content":"For more granular control, you can set privacy settings on a per-integration basis: Log into your PushPreview account. Navigate to the Integrations page. Choose the integration you want to modify. Click Edit. Enable the Private previews option. Save the changes. This option is ideal for teams that require different privacy levels for various integrations, allowing flexibility and control over who can access specific previews. "},{"title":"Pull request previews for Hugo","type":0,"sectionRef":"#","url":"/installation/hugo","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for Hugo","url":"/installation/hugo#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A Hugo site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for Hugo","url":"/installation/hugo#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your Hugo project: Go to the .github/workflows directory in your Hugo repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Modify the Build site step to align with your Hugo build process. For example: - name: Build site run: | cd docs sudo apt-get install -y hugo hugo Ensure the source-directory in the Generate preview step points to your Hugo build output folder, typically ./public: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/public github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for Hugo","url":"/installation/hugo#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for Hugo","url":"/installation/hugo#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Pull request previews for Gatsby","type":0,"sectionRef":"#","url":"/installation/gatsby","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for Gatsby","url":"/installation/gatsby#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A Gatsby site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for Gatsby","url":"/installation/gatsby#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your Gatsby project: Go to the .github/workflows directory in your Gatsby repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Modify the Build site step to align with your Gatsby build process. For example: - name: Build site run: | cd docs npm install npm run build Ensure the source-directory in the Generate preview step points to your Gatsby build output folder, typically ./public: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/public github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for Gatsby","url":"/installation/gatsby#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for Gatsby","url":"/installation/gatsby#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Pull request previews for Docusaurus","type":0,"sectionRef":"#","url":"/installation/docusaurus","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for Docusaurus","url":"/installation/docusaurus#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A Docusaurus site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for Docusaurus","url":"/installation/docusaurus#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your Docusaurus project: Go to the .github/workflows directory in your Docusaurus repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Modify the Build site step to align with your Docusaurus build process. For example: - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build Ensure the source-directory in the Generate preview step points to your Docusaurus build output folder, typically ./build: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for Docusaurus","url":"/installation/docusaurus#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Edit Docusaurus configuration​","type":1,"pageTitle":"Pull request previews for Docusaurus","url":"/installation/docusaurus#3-edit-docusaurus-configuration","content":"To ensure your Docusaurus site correctly supports preview builds, you'll need to adjust the base URL setting in the Docusaurus configuration. This modification allows your site to correctly resolve URLs in the context of the preview environment. Follow the steps below to make these changes: Open the docusaurus.config.js file located in the root directory of your Docusaurus project. Modify the baseUrl setting to dynamically adapt to different environments, particularly for preview deployments. Update the setting as follows: module.exports = { // ... other configurations ... baseUrl: process.env.BASE_URL || '/', // ... other configurations ... }; Save the changes and push the updated docusaurus.config.js file to your repository to enable correct URL handling in preview builds. "},{"title":"4. Verify the installation​","type":1,"pageTitle":"Pull request previews for Docusaurus","url":"/installation/docusaurus#4-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Pull request previews for any static site","type":0,"sectionRef":"#","url":"/installation/html","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for any static site","url":"/installation/html#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.An static site (HTML) created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for any static site","url":"/installation/html#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your project: Go to the .github/workflows directory in your repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - name: Setup environment uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Modify the Setup environment and Build site steps to match your specific static site build process. Ensure the source-directory in the Generate preview step points to where your HTML files are located after the build. Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for any static site","url":"/installation/html#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for any static site","url":"/installation/html#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Pull request previews for Pelican","type":0,"sectionRef":"#","url":"/installation/pelican","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for Pelican","url":"/installation/pelican#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A Pelican site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for Pelican","url":"/installation/pelican#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your Pelican project: Go to the .github/workflows directory in your Pelican repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Replace the actions/setup-node@v3 step to install Python instead: - uses: actions/setup-python@v2 with: python-version: 3.8 # Adjust the Python version as needed for your project Modify the Build site step to align with your Pelican build process. For example: - name: Build site run: | cd docs pip install -r requirements.txt pelican content -o output -s pelicanconf.py Ensure the source-directory in the Generate preview step points to your Pelican build output folder, typically ./output: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/output github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for Pelican","url":"/installation/pelican#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for Pelican","url":"/installation/pelican#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Pull request previews for MkDocs","type":0,"sectionRef":"#","url":"/installation/mkdocs","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for MkDocs","url":"/installation/mkdocs#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A MkDocs site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for MkDocs","url":"/installation/mkdocs#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your MkDocs project: Go to the .github/workflows directory in your MkDocs repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Replace the actions/setup-node@v3 step to install Python instead: - uses: actions/setup-python@v2 with: python-version: 3.8 # Adjust the Python version as needed for your project Modify the Build site step to align with your MkDocs build process. For example: - name: Build site run: | cd docs pip install -r requirements.txt mkdocs build Ensure the source-directory in the Generate preview step points to your MkDocs build output folder, typically ./site: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/site github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for MkDocs","url":"/installation/mkdocs#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for MkDocs","url":"/installation/mkdocs#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Pull request previews for Jekyll","type":0,"sectionRef":"#","url":"/installation/jekyll","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for Jekyll","url":"/installation/jekyll#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A Jekyll site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for Jekyll","url":"/installation/jekyll#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your Jekyll project: Go to the .github/workflows directory in your Jekyll repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Replace the actions/setup-node@v3 step to install Ruby instead: - name: Setup Ruby uses: ruby/setup-ruby@v1 with: ruby-version: '3.0' # Adjust the Ruby version as needed for your project Modify the Build site step to align with your Jekyll build process. For example: - name: Build site run: | cd docs gem install bundler bundle install bundle exec jekyll build Ensure the source-directory in the Generate preview step points to your Jekyll build output folder, typically ./_site: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/_site github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for Jekyll","url":"/installation/jekyll#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for Jekyll","url":"/installation/jekyll#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "},{"title":"Support","type":0,"sectionRef":"#","url":"/support","content":"","keywords":""},{"title":"Getting started​","type":1,"pageTitle":"Support","url":"/support#getting-started","content":"Quickstart: Need help installing PushPreview? This guide covers all the steps to get you started.Installation guides: Step-by-step installation guides for a range of CMS.Configuration guides: Step-by-step configuration guides for customizing the preview generation. "},{"title":"Frequently asked questions (FAQs)​","type":1,"pageTitle":"Support","url":"/support#frequently-asked-questions-faqs","content":"See our FAQs for answers to common questions about PushPreview. "},{"title":"Contact us​","type":1,"pageTitle":"Support","url":"/support#contact-us","content":"If you can't find the solution to your problem or have further questions, don't hesitate to reach out at support@pushpreview.com. We're here to help! Our support team is available Monday to Friday, from 9 AM to 5 PM EST. We aim to respond to all queries within 48 hours. "},{"title":"Feedback​","type":1,"pageTitle":"Support","url":"/support#feedback","content":"Your feedback is valuable to us! If you have suggestions or feedback about our platform or support, please let us know. "},{"title":"Pull request previews for GitHub","type":0,"sectionRef":"#","url":"/integrations/github","content":"","keywords":""},{"title":"Quickstart​","type":1,"pageTitle":"Pull request previews for GitHub","url":"/integrations/github#quickstart","content":"Enable pull request previews on GitHub with PushPreview by following the Quickstart. This step-by-step guide explains how to integrate automated preview generation into your GitHub workflow, streamlining review processes for web projects and applications "},{"title":"Authentication​","type":1,"pageTitle":"Pull request previews for GitHub","url":"/integrations/github#authentication","content":"Previews generated through PushPreview are public by default. However, for added security or confidentiality, PushPreview offers private previews. For more information, see Private previews. When accessing a private preview, PushPreview prompts for a GitHub login to ensure secure access:  Only users with permission to see the repository can access the preview. PushPreview uses OAuth 2.0 authentication to maintain a secure connection with GitHub. "},{"title":"GitHub Action​","type":1,"pageTitle":"Pull request previews for GitHub","url":"/integrations/github#github-action","content":"The PushLabsHQ/pushpreview-action facilitates the connection between GitHub and PushPreview, integrating it into your GitHub workflow. Below is an example of how to use the push-preview-action in a workflow:  name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV # Replace with your docs build commands - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: # Replace with your docs output directory source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }}  For more information on customizing the workflow to your build process, refer to the Installation section for CMS-specific guides. "},{"title":"Pull request previews for Sphinx","type":0,"sectionRef":"#","url":"/installation/sphinx","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Pull request previews for Sphinx","url":"/installation/sphinx#prerequisites","content":"Before you begin, you'll need to have the following: A PushPreview account. If you don't have one, sign up for free.A Sphinx site created. "},{"title":"1. Add the workflow to your repository​","type":1,"pageTitle":"Pull request previews for Sphinx","url":"/installation/sphinx#1-add-the-workflow-to-your-repository","content":"To set up the PushPreview workflow in your Sphinx project: Go to the .github/workflows directory in your Sphinx repository. Create a new file named pushpreview.yml. Copy the following content into pushpreview.yml: name: PushPreview on: pull_request_target: types: - labeled jobs: preview: runs-on: ubuntu-latest if: github.event.label.name == 'preview' steps: - uses: actions/checkout@v3 - name: Comment run: | gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body &quot;⚙️ Hang tight! PushPreview is currently building your preview. We'll share the URL as soon as it's ready.&quot; env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} - uses: actions/setup-node@v3 with: node-version: 18 - name: Set BASE_URL run: echo &quot;BASE_URL=/github/${{ github.repository }}/${{ github.event.number }}/&quot; &gt;&gt; $GITHUB_ENV - name: Build site run: | cd docs yarn install --frozen-lockfile yarn build - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/build github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Replace the actions/setup-node@v3 step to install Python instead: - uses: actions/setup-python@v2 with: python-version: 3.8 # Adjust the Python version as needed for your project Modify the Build site step to align with your Sphinx build process. For example: - name: Build site run: | cd docs pip install -r requirements.txt sphinx-build -b html source _build/html Ensure the source-directory in the Generate preview step points to your Sphinx build output folder, typically ./_build/html: - name: Generate preview uses: PushLabsHQ/pushpreview-action@1.0.6 with: source-directory: ./docs/_build/html github-token: ${{ secrets.GITHUB_TOKEN }} pushpreview-token: ${{ secrets.PUSHPREVIEW_TOKEN }} Save your changes and push the updated pushpreview.yml file to your repository. "},{"title":"2. Configure the GitHub secret​","type":1,"pageTitle":"Pull request previews for Sphinx","url":"/installation/sphinx#2-configure-the-github-secret","content":"To configure the GitHub secret, follow these steps:  Generate a PushPreview token. For more information, see Authentication. Go to the Settings tab of your GitHub repository or organization. In the Settings menu, navigate to Secrets and chose Actions. Click on New repository secret or New organization secret, depending on your choice in the previous step. Use the following details to create a new token: Name: PUSHPREVIEW_TOKENToken: The token you have generated. Click Add secret. "},{"title":"3. Verify the installation​","type":1,"pageTitle":"Pull request previews for Sphinx","url":"/installation/sphinx#3-verify-the-installation","content":"To ensure proper functioning of the PushPreview integration in your GitHub repository, follow these steps: Create a new pull request in your GitHub repository. Add the preview label to your new pull request. If the label doesn’t exist, create a new one. Wait briefly for PushPreview to process the pull request and post a comment in the pull request thread. Look for a comment from PushPreview containing a preview link. Click this link to view the changes. Congratulations on setting up PushPreview! Your users can now view live previews of changes in pull requests, enhancing collaboration and review efficiency. "}]